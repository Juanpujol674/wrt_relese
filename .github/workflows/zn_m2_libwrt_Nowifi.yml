name: zn_m2_libwrt_Nowifi

on:
  schedule:
    - cron: "0 19 * * *"  # UTC时间18点=北京时间凌晨2点
  workflow_dispatch: {}   # 保留手动触发能力

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space
        uses: FirelightFlagboy/gh-runner-free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Install System Dependencies 
        run: |
          sudo apt-get update && \
          sudo apt-get install -y build-essential git-core libncurses5-dev zlib1g-dev 

      - name: Initialization Values
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S_zn_m2_libwrt_Nowifi")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/zn_m2_libwrt_Nowifi.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV
          echo "BUILD_DATE: $BUILD_DATE"
          echo "BUILD_SRC: $BUILD_SRC"

      - name: Verify Dependencies 
        run: |
          which gcc && \
          which git && \
          dpkg -s libncurses5-dev && \
          dpkg -s zlib1g-dev 

      - name: Debug Initialization Values
        run: |
          echo "Debugging BUILD_DATE and BUILD_SRC"
          echo "BUILD_DATE: ${{ env.BUILD_DATE }}"
          echo "BUILD_SRC: ${{ env.BUILD_SRC }}"

      - name: Pre Clone
        run: |
          echo "Using REPO_BRANCH: kernel-6.12"
          export REPO_BRANCH="kernel-6.12"
          
          # 强制清理旧目录并重新克隆
          rm -rf zn_m2-libwrt-612
          git clone --depth=1 --branch=$REPO_BRANCH $BUILD_SRC zn_m2-libwrt-612
          cd zn_m2-libwrt-612
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ./zn_m2-libwrt-612/.ccache
            ./zn_m2-libwrt-612/staging_dir
          key: ${{ runner.os }}-znm2-nowifi-${{ hashFiles('**/repo_flag') }}
          restore-keys: |
            ${{ runner.os }}-zn_m2_libwrt_Nowifi-

      - name: Cache OpenWrt Source
        uses: actions/cache@v4
        id: cache-source
        with:
          path: ./zn_m2-libwrt-612
          key: ${{ runner.os }}-openwrt-source-${{ hashFiles('compilecfg/zn_m2_libwrt_Nowifi.ini') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-source-
        # 仅在缓存未命中时执行源码操作
        if: steps.cache-source.outputs.cache-hit != 'true'

      - name: Verify Source Code
        run: |
          cd zn_m2-libwrt-612
          if [ ! -f "Makefile" ]; then
            echo "❌ Error: Makefile not found in source directory!"
            exit 1
          fi
          echo "✅ Verified: Makefile exists"
          ls -la

      - name: Build Firmware
        run: |
          cd zn_m2-libwrt-612
          export TERM=dumb  # 强制指定终端类型
          make clean
          # 确保存在 .config 或使用 defconfig
          [ -f .config ] || make defconfig  
          ./build.sh zn_m2_libwrt_Nowifi release

      - name: Get Kernel Version
        run: |
          echo "KVER=$(find ./zn_m2-libwrt-612/dl -maxdepth 1 -name 'linux-[4-6]\.*' | sort -r | head -n 1 | grep -oE '[4-6]\.[0-9]{1,3}\.[0-9]{1,3}')" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          gh cache list --key ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          echo "========cache status========"
          echo "ccache: $(du -sh ./zn_m2-libwrt-612/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./zn_m2-libwrt-612/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Package OpenWrt Firmware
        if: ${{ inputs.model == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: zn_m2-libwrt-612/firmware/*.tar.gz
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.6.y
          WHOAMI: DavidWei

      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "无wifi" >> release_body.txt
          echo "LAN地址: 192.168.1.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app-[a-zA-Z0-9]{1,30}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      - name: Debug Release Body
        run: |
          cat release_body.txt

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}
          name: ${{ env.BUILD_DATE }}
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt
