name: zn_m2_libwrt_Nowifi

on:
  schedule:
    - cron: "0 19 * * *"
  workflow_dispatch: {}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space
        uses: FirelightFlagboy/gh-runner-free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Clean APT Cache
        run: |
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install System Dependencies
        run: |
          sudo sed -i 's/azure\.archive\.ubuntu\.com/mirrors.aliyun.com/g' /etc/apt/sources.list
          sudo apt-get update -o Acquire::Check-Valid-Until=false
          sudo apt-get install -y \
            build-essential \
            git-core \
            libncursesw5-dev \
            zlib1g-dev \
            libssl-dev \
            python3-distutils \
            flex \
            bison

      - name: Verify Dependencies (Combined)
        run: |
          echo "=== Core Dependencies ==="
          which gcc || { echo "gcc not found"; exit 1; }
          which g++ || { echo "g++ not found"; exit 1; }
          which git || { echo "git not found"; exit 1; }
          dpkg -s libncursesw5-dev || { echo "libncursesw5-dev not installed"; exit 1; }
          dpkg -s zlib1g-dev || { echo "zlib1g-dev not installed"; exit 1; }

      - name: Initialization Values
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S_zn_m2_libwrt_Nowifi")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/zn_m2_libwrt_Nowifi.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Prepare Workspace
        run: |
          rm -rf zn_m2-libwrt-612
          git clone --depth=1 --branch=kernel-6.12 $BUILD_SRC zn_m2-libwrt-612

      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            zn_m2-libwrt-612/.ccache
            zn_m2-libwrt-612/staging_dir
            zn_m2-libwrt-612/build_dir
          key: ${{ runner.os }}-znm2-nowifi-${{ hashFiles('compilecfg/zn_m2_libwrt_Nowifi.ini') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-znm2-nowifi-

      - name: Apply Hostapd Fixes
        run: |
          cd zn_m2-libwrt-612
          # 禁用HE_MU_EDCA相关功能
          sed -i '/CONFIG_IEEE80211AX/d' package/network/services/hostapd/Makefile
          echo "# CONFIG_IEEE80211AX is not set" >> package/network/services/hostapd/Makefile
          
          # 创建修复补丁
          mkdir -p package/network/services/hostapd/patches
          cat << 'EOF' > package/network/services/hostapd/patches/999-fix-he_mu_edca.patch
          --- a/src/ap/hostapd.c
          +++ b/src/ap/hostapd.c
          @@ -4512,7 +4512,9 @@
                   return -1;
               }
            
          +#ifdef CONFIG_IEEE80211AX
               hapd->iface->conf->he_mu_edca.he_qos_info &= 0xfff0;
          +#endif
               if (freq->he_enabled && set_he) {
                   hapd->iface->conf->he_op.he_bss_color = cs->bss_color;
                   hapd->iface->conf->he_op.he_bss_color_disabled = 0;
          EOF

      - name: Setup Feeds
        run: |
          cd zn_m2-libwrt-612
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Build Firmware
        run: |
          cd zn_m2-libwrt-612
          export TERM=dumb
          [ -f .config ] || make defconfig
          
          # 强制禁用无线组件
          echo "CONFIG_PACKAGE_hostapd=n" >> .config
          echo "CONFIG_PACKAGE_wpad-basic-mbedtls=n" >> .config
          
          make oldconfig
          make download -j$(nproc)
          make -j$(($(nproc) + 1)) || make -j1 V=s

      - name: Package and Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}
          name: ${{ env.BUILD_DATE }}
          files: zn_m2-libwrt-612/firmware/*.*
          body: |
            云编译发布
            源码：${{ env.BUILD_SRC }}
            Kernel: $(find zn_m2-libwrt-612/dl -maxdepth 1 -name 'linux-[4-6]\.*' | grep -oE '[4-6]\.[0-9]{1,3}\.[0-9]{1,3}')
            无wifi
            LAN地址: 192.168.1.1
            插件：
            $(grep -oP "luci-app-[a-zA-Z0-9]{1,30}" zn_m2-libwrt-612/firmware/*.manifest | awk -F":" '{print $NF}')
